cabbrev H vert bo help
cabbrev h vert bo help
command! Q q!
command! Qa qa!
command! Zenmode execute "Goyo | Limelight"
command! LightlineToggle call lightline#toggle()

" leader and , {{{1
let mapleader=";"

nmap <leader><space> :nohlsearch<cr>
nmap <leader>bg :call ToggleBG()<CR>
nmap <leader>ev :call ManageMyVimrcFiles()<cr>
nmap <leader>ef <Plug>(easymotion-overwin-f)
xmap <leader>ef <Plug>(easymotion-overwin-f)
nmap <leader>ej <Plug>(easymotion-jumptoanywhere)
xmap <leader>ej <Plug>(easymotion-jumptoanywhere)
nmap <leader>ew <Plug>(easymotion-overwin-w)
xmap <leader>ew <Plug>(easymotion-overwin-w)
nmap <leader>ee <Plug>(easymotion-overwin-e)
xmap <leader>ee <Plug>(easymotion-overwin-e)

nmap <leader>g :Grepper -tool git<CR>
nmap <leader>G :Grepper -tool ack<CR>

"imap <leader>im <C-O>:call blitz#input_method_open()<CR>|imap <leader>ic <C-O>:call blitz#input_method_close()<CR>

nnoremap <leader>q q

nmap <expr> <leader>r ":split term://ghci ".expand('%')."\n"
nmap <leader>s :%s/

nmap <leader>t :Tabularize /
vmap <leader>t :Tabularize /

nmap ,c :ColorExplorerToggle<cr>
"nmap ,e <Cmd>:call NERDTreeToggleAndSetOptions()<cr>
nmap ,e <Cmd>:call LuaTreeToggleAndSetOptions()<cr>
nmap ,m :GundoToggle<cr>
nmap ,l <Cmd>:call QuickfixToggle("ll")<cr>
nmap ,q <Cmd>:call QuickfixToggle("qf")<cr>
nmap ,, za

" }}}

" My own plugin

"if system("pgrep -f Practice/Shell/record_keyboard.py") == ""
"  call jobstart(["python3", expand("~/Practice/Shell/record_keyboard.py")
"        \, expand("~/Practice/Shell/kb_record.db")]
"        \, {'detach':1})
"endif
"au VimLeave * call system("pgrep -f Practice/Shell/record_keyboard.py | xargs -r kill")

nmap <silent> <F1> :ZOmniwindowToggle<CR>
imap <silent> <F1> <esc>:ZOmniwindowToggle<CR>
tmap <silent> <F1> <C-\><C-n>:ZOmniwindowToggle<CR>

" In order to use pear-tree, don't use noremap
imap <expr> j easy_jk#map_j()
imap <expr> k easy_jk#map_k()
cnoremap <expr> j easy_jk#cmap_j()
cnoremap <expr> k easy_jk#cmap_k()

nmap <silent> <C-d> :call animation#scroll_up(winheight(0)/2)<CR>
nmap <silent> <C-f> :call animation#scroll_up(winheight(0))<CR>
nmap <silent> <C-u> :call animation#scroll_down(winheight(0)/2)<CR>
nmap <silent> <C-b> :call animation#scroll_down(winheight(0))<CR>
nmap <PageDown> <C-f>
nmap <PageUp> <C-b>

vnoremap X y/\V<C-R>=escape(escape(@",'\'),'/')<CR><CR>
vnoremap <silent> x :call <SID>ExchangeSelected()<CR>

nnoremap <space> gjgj

nmap q <Nop>

" Basic

nnoremap Y y$
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)

"nnoremap <silent> <Tab> :bn<cr>
"nnoremap <silent> <S-Tab> :bN<CR>
" <C-i> is bind to <Tab>, so remapping <Tab> will cause <C-i> remapping the
" same as <Tab>

nnoremap <C-p> :<C-p>
nnoremap <C-q> <C-w>q

inoremap <C-l> <C-g>u<Esc>$[s1z=`]i<C-g>u
nnoremap <C-l> i<C-g>u<Esc>$[s1z=`]a<C-g>u<Esc>

nnoremap <C-s> :wa<cr>
inoremap <C-s> <Esc>:wa<cr>a

vnoremap < <gv
vnoremap > >gv

"tnoremap <A-h> <C-\><C-N><C-w>h|tnoremap <A-j> <C-\><C-N><C-w>j|tnoremap <A-k> <C-\><C-N><C-w>k|tnoremap <A-l> <C-\><C-N><C-w>l
"inoremap <A-h> <C-\><C-N><C-w>h|inoremap <A-j> <C-\><C-N><C-w>j|inoremap <A-k> <C-\><C-N><C-w>k|inoremap <A-l> <C-\><C-N><C-w>l

nnoremap H <C-w>h
nnoremap J <C-w>j
nnoremap K <C-w>k
nnoremap L <C-w>l
nnoremap <C-w>< <C-w><<C-w><<C-w><<C-w><<C-w><<C-w><<C-w><<C-w><<C-w><<C-w><
nnoremap <C-w>> <C-w>><C-w>><C-w>><C-w>><C-w>><C-w>><C-w>><C-w>><C-w>><C-w>>
nnoremap <C-w>+ <C-w>+<C-w>+<C-w>+<C-w>+<C-w>+
nnoremap <C-w>- <C-w>-<C-w>-<C-w>-<C-w>-<C-w>-

nmap <C-k> <Plug>NERDCommenterToggle
xmap <C-k> <Plug>NERDCommenterToggle

"nnoremap mf :wa<cr>:!make flash<cr>
"nnoremap mm :!make monitor<cr>

" s:ExchangeSelected {{{
let s:text1=""
let s:text2=""
let s:location1=[]
let s:location2=[]
let s:timer_id = 0
function! ClearSavedText(timer)
  let s:text1=""
  echo "vmap x: saved text cleared."
endfunction

function! s:ExchangeSelected()
  if len(s:text1) == 0
    let s:timer_id = timer_start(10 * 1000, 'ClearSavedText')
    let s:location1 = getpos("'<")
    normal! gvxmZ
    let s:text1=@"
  else
    call timer_stop(s:timer_id)
    let s:location2 = getpos("'<")

    let tmp=@z
    let @z=s:text1

    normal! gv"zp
    let s:text2 = @"

    " this fix the bug when text2 precede text1 in the same line: the mark
    " will not move when the preceding text are deleted, thus mark `Z` is no
    " longer the position of text1.
    if s:location2[1] == s:location1[1] && s:location2[2] < s:location1[2]
      let offset = strdisplaywidth(s:text1) - strdisplaywidth(s:text2)
      let move = "0" . string(s:location1[2] + offset - 1) . "l"

      exe "normal! " . move . "P"
    else
      normal! `ZP
    endif

    let @z=tmp
    let s:text1=""
  endif
endfunction
" }}}
" ManageMyVimrcFiles() {{{
function! ManageMyVimrcFiles() abort
  call lightline#disable()
  tabedit ~/.vim/.vimrc
  let width = winwidth(0) / 2 - 2
  let height = winheight(0) / 2 - 2
  let g:animation_task_queue = 1
  call animation#cmd("1vsplit ~/.vim/.vimrc.bundle")
  call animation#vertical_resize_delta(width)
  call animation#cmd("wincmd h | 1split ~/.vim/.vimrc.mapping")
  call animation#resize_delta(height)
  call animation#cmd("wincmd l | 1split ~/.vim/.vimrc.tui")
  call animation#resize_delta(height)
  call animation#cmd("wincmd h")
  call animation#cmd("call lightline#enable()")
endfunction

" function! Foo() {{{
function! Foo()
  let g:animation_task_queue = 1
  call animation#vertical_resize_delta({-> 120 - 1}, '1vsplit')
  call animation#vertical_resize_delta({-> 80 - 1}, '1vsp')
  call animation#vertical_resize_delta({-> 40 - 1}, '1vsp')
endfunction
" }}}

" }}}
" Toggle background {{{
function! ToggleBG()
  let s:tbg = &background
  " Inversion
  if s:tbg == "dark"
    set background=light
    echo "set background=light"
  else
    set background=dark
    echo "set background=dark"
  endif
endfunction
" }}}
" QuickfixToggle() {{{
au FileType qf map <silent> <buffer> q <C-W>q|
      \  map <buffer> t <C-W><CR><C-W>T|
      \  map <buffer> gt <C-W><CR><C-W>TgT<C-W>j|
      \  map <buffer> o <CR>|
      \  map <buffer> go <CR><C-W>j|
      \  map <buffer> s <C-W><CR><C-W>K|
      \  map <buffer> gs <C-W><CR><C-W>K<C-W>b|
      \  map <buffer> v <C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t|
      \  map <buffer> gv <C-W><CR><C-W>H<C-W>b<C-W>J

func! QuickfixToggle(flag)
  if a:flag != "qf" && a:flag != "ll"
    echom "QuickfixToggle(flag): a:flag not valid!"
    return
  endif

  if a:flag == "qf"
    if getqflist({'winid' : 0}).winid
      cclose
      wincmd p
    else
      botright copen
    endif
  elseif a:flag == "ll"
    if getloclist(winnr(), {'winid' : 0}).winid
      lclose
      wincmd p
    else
      lopen
    endif
  endif
endfunc
"}}}
" M (man): get helped {{{
nnoremap M K
vnoremap M K
au BufEnter *.rkt,*.rktl nnoremap <buffer> M :silent !raco docs <cword><cr>:redraw!<cr>
au BufEnter *.rkt,*.rktl vnoremap <buffer> M :call <SID>Racket_visual_doc()<cr>

" For the visual mode M mapping, it's slightly more convoluted to get the
" selected text:
function! s:Racket_visual_doc()
  try
    let l:old_a = @a
    normal! gv"ay
    call system("rack docs '". @a . "'")
    redraw!
    return @a
  finally
    let @a = l:old_a
  endtry
endfunction
" }}}
" {{{ Debug
" run <url:vimscript:packadd termdebug> to add Termdebug

"nnoremap <F5>    :Run<cr>
"nnoremap <S-F5>  :Continue
" set breakpoint
nnoremap <F9>    :Break<cr>
" step over
nnoremap <F10>   :Over<cr>
" step into
nnoremap <F11>   :Step<cr>
" step out
"nnoremap <S-F11> :Finish<cr>

"au BufEnter *.rkt,*.rktl nnoremap <buffer> <F5> :!racket -t %<cr>
"function! s:start_debug(ft)
"if ft == 'haskell'
"endif
"endfunction
" }}}
