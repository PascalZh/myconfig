" Outlooking
" rainbow parentheses {{{1
let g:rbpt_colorpairs = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['brown',       'firebrick3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]

      "\ ['gray',        'RoyalBlue3'],
      "\ ['black',       'SeaGreen3'],
      "\ ['darkmagenta', 'DarkOrchid3'],
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" }}}
" camspiers/lens.vim  & animate.vim {{{
let g:animate#distribute_space = 1
let g:animate#duration = 500.0
" available: ease_out_cubic ease_out_quad ease_linear
let g:animate#easing_func = 'animate#ease_out_quad'
let g:lens#disabled = 1
let g:lens#disabled_filetypes = ['nerdtree', 'fzf', 'qf']
let g:lens#width_resize_max = 100
let g:lens#width_resize_min = 3
" }}}
" mhinz/vim-startify {{{1
let g:startify_fortune_use_unicode = 1
let g:startify_files_number = 5
let g:startify_change_to_vcs_root = 0
"let g:startify_enable_unsafe = 1
let g:startify_lists = [
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]
let g:startify_bookmarks = [ '~/.vim/bundle/omniwindow.nvim/lua/fancy_q.lua' ]
let g:startify_commands = [
      \ ':help startify',
      \ ]
      "\ ['Vim Reference', 'h ref'],
      "\ {'h': 'h ref'},
      "\ {'m': ['My magical function', 'call Magic()']},
" }}}
" Edit
" preservim/nerdcommenter {{{
let g:NERDDefaultAlign = 'left'
" }}}
" tmsvg/pear-tree {{{
" Default rules for matching:
let g:pear_tree_pairs = {
      \ '(': {'closer': ')'},
      \ '[': {'closer': ']'},
      \ '{': {'closer': '}'},
      \ "'": {'closer': "'"},
      \ '"': {'closer': '"'}
      \ }
" See pear-tree/after/ftplugin/ for filetype-specific matching rules

" Pear Tree is enabled for all filetypes by default:
let g:pear_tree_ft_disabled = []

" Pair expansion is dot-repeatable by default:
let g:pear_tree_repeatable_expand = 1

" Smart pairs are disabled by default:
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

" If enabled, smart pair functions timeout after 60ms:
let g:pear_tree_timeout = 60

" Automatically map <BS>, <CR>, and <Esc>
let g:pear_tree_map_special_keys = 0
imap <BS> <Plug>(PearTreeBackspace)
imap <CR> <Plug>(PearTreeExpand)
imap <Space> <Plug>(PearTreeSpace)
" remap of <ESC> will cause some conflicts with other plugins, so it will be
" integrated in my `easy_jk` plugin.

" Default mappings:
"imap <BS> <Plug>(PearTreeBackspace)
"imap <CR> <Plug>(PearTreeExpand)
"imap <Esc> <Plug>(PearTreeFinishExpansion)
" Pear Tree also makes <Plug> mappings for each opening and closing string.
"     :help <Plug>(PearTreeOpener)
"     :help <Plug>(PearTreeCloser)

" Not mapped by default:
" <Plug>(PearTreeSpace)
" <Plug>(PearTreeJump)
" <Plug>(PearTreeExpandOne)
" <Plug>(PearTreeJNR)
" }}}
" gundo and backup{{{1
set backup
if finddir('.vim/undo', $HOME) == ''
  call mkdir($HOME . "/.vim/undo", "p")
endif
if finddir('.vim/backup', $HOME) == ''
  call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif
let g:gundo_width=50
let g:gundo_prefer_python3=1
" }}}
" multiple-cursors{{{1
"let g:multi_cursor_insert_maps        = {'j':1, '<leader>':1}

let g:multi_cursor_normal_maps = {'@': 1, 'F': 1, 'T': 1, '[': 1, '\': 1, ']': 1, '!': 1, '"': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'm': 1, 'q': 1, 'r': 1, 't': 1, 'y': 1, 'z': 1, '<': 1, '=': 1, '>': 1, 'a': 1, 'i': 1}
" }}}
" Code
" ultisnips {{{1
"let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsUsePythonVersion=3

" you need manually copy snippets into ~/.vim/suba_snippets (subalashii)
let g:UltiSnipsSnippetsDir=$HOME . "/.vim/suba_snippets"
let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/suba_snippets"]

let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
"let g:UltiSnipsRemoveSelectModeMappings = 0
" }}}
" neoclide/coc.nvim {{{
" Use <c-space> to trigger completion.
call coc#add_extension('coc-python', 'coc-ultisnips', 'coc-marketplace')

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <c-n>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <c-p> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" }}}
" airblade/vim-gitgutter {{{1
set updatetime=100
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
" }}}
" vim-haskellConcealPlus{{{
let g:hscoptions='wErl↱'
" }}}
" haskell-vim{{{
let g:haskell_classic_highlighting=1
" }}}
" Other
" kyazdani42/nvim-tree.lua {{{
let g:lua_tree_bindings = {
    \ 'edit':            ['<CR>', 'o'],
    \ 'edit_vsplit':     'v',
    \ 'edit_split':      's',
    \ 'edit_tab':        't',
    \ 'toggle_ignored':  'I',
    \ 'toggle_dotfiles': 'H',
    \ 'refresh':         'R',
    \ 'preview':         '<Tab>',
    \ 'cd':              '<C-]>',
    \ 'create':          'a',
    \ 'remove':          'd',
    \ 'rename':          'r',
    \ 'cut':             'x',
    \ 'copy':            'c',
    \ 'paste':           'p',
    \ 'prev_git_item':   '[c',
    \ 'next_git_item':   ']c',
    \ }
let g:lua_tree_indent_markers = 1
func! LuaTreeToggleAndSetOptions()
  LuaTreeToggle
  if expand('%') == 'LuaTree'
    setlocal nocursorcolumn
    map <buffer> q <C-w>q
  endif
endfunc
" }}}
" NerdTree {{{1
" 最后一个窗口是nerdtree时关闭vim正常关闭
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

func! NERDTreeToggleAndSetOptions()
  NERDTreeToggle
  let str=expand('%')
  if matchstr(str,'NERD_tree_') != ''
    setlocal nocursorcolumn
    nnoremap <buffer> b 3G
  endif
endfunc
let g:NERDTreeNaturalSort=1
let g:NERDTreeMapOpenSplit="s"
let g:NERDTreeMapPreviewSplit="gs"
let g:NERDTreeMapOpenVSplit="v"
let g:NERDTreeMapPreviewVSplit="gv"
"}}}
" Plug 'nvim-treesitter/nvim-treesitter' {{{
lua <<EOF
require'nvim-treesitter.configs'.setup {
    highlight = {
        enable = true,                 -- false will disable the whole extension
    },
    indent = {
        enable = true,
    },
}
EOF
" }}}
" {{{ lervag/vimtex
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:tex_flavor = 'latex'
set conceallevel=1
"let g:tex_conceal='abdmg'
" }}}
let g:startuptime_self = 1
let g:grepper = {}
let g:grepper.tools = ['git', 'ack']
let g:grepper.prompt_text = '$c=> '
let g:grepper.jump = 0
" Deleted
" ncm2/ncm2(deleted) {{{1
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
"inoremap <c-c> <ESC>

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Use <TAB> to select the popup menu:
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" wrap existing omnifunc
" Note that omnifunc does not run in background and may probably block the
" editor. If you don't want to be blocked by omnifunc too often, you could
" add 180ms delay before the omni wrapper:
"  'on_complete': ['ncm2#on_complete#delay', 180,
"               \ 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
"au User Ncm2Plugin call ncm2#register_source({
      "\ 'name' : 'css',
      "\ 'priority': 9, 
      "\ 'subscope_enable': 1,
      "\ 'scope': ['css','scss'],
      "\ 'mark': 'css',
      "\ 'word_pattern': '[\w\-]+',
      "\ 'complete_pattern': ':\s*',
      "\ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
      "\ })
" }}}
" neomake/neomake(deleted) {{{1
"function! MyOnBattery()
"return readfile('/sys/class/power_supply/AC/online') == ['0']
"endfunction

"if has('nvim')
"if MyOnBattery()
"call neomake#configure#automake('nrwi', 500)
"else
"call neomake#configure#automake('nrwi', 150)
"endif
"endif
"let g:neomake_cpp_enabled_makers=['gcc']
"let g:neomake_cpp_gcc_args=['-fsyntax-only', '-Wall', '-Wextra', '-I./',
"\'-std=c++1z',
"\'-I/usr/include/python3.5m',
"\'-lfmt']
"\'-L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu', '-L/usr/lib', '-lpython3.5m', '-lpthread', '-ldl', '-lutil', '-lm', '-Xlinker', '-export-dynamic', '-Wl,-O1', '-Wl,-Bsymbolic-functions',
"let g:neomake_open_list = 2
" }}}
" ncm2/ncm2-ultisnips(deleted) {{{1
" }}}
" cpp-enhanced-hl(deleted){{{1
"if LINUX()
"let g:cpp_class_scope_highlight = 1
"let g:cpp_member_variable_highlight = 1
"let g:cpp_class_decl_highlight = 1
"let g:cpp_experimental_simple_template_highlight = 1
"endif
"}}}
" ycm (deleted) {{{1
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"let g:ycm_key_list_select_completion   = ['<Tab>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<S-Tab>', '<C-p>', '<Up>']
" }}}
" ale (deleted) {{{1
"let g:ale_fixers={
"\	'*':['remove_trailing_lines', 'trim_whitespace'],
      "\ 'python':['autopep8', 'yapf'],
"\}
"let g:ale_linters={
"\	'c++':['clang'],
"\	'c':['clang'],
      "\ 'python':['flake8', 'pylint'],
"\}
"let g:ale_lint_on_text_changed='always'
"let g:ale_lint_on_enter = 0
" }}}
"  ack.vim (deleted) {{{1
if LINUX()
  let g:ack_mappings = {
        \"t":"<C-W><CR><C-W>T" ,
        \"gt":"<C-W><CR><C-W>TgT<C-W>j" ,
        \"o":"<CR>" ,
        \"go":"<CR><C-W>j" ,
        \"s":"<C-W><CR><C-W>K" ,
        \"gs":"<C-W><CR><C-W>K<C-W>b" ,
        \"v":"<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t" ,
        \"gv":"<C-W><CR><C-W>H<C-W>b<C-W>J" }
  "    let g:ack_use_dispatch=1
endif
" }}}
" autopair (deleted) {{{1
" works in the insert mode
"au FileType racket let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
"au FileType vim let b:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'", '`':'`'}
"let g:AutoPairsFlyMode = 1
"let g:AutoPairsShortcutToggle = ''
"let g:AutoPairsShortcutJump = '<leader>n'
"let g:AutoPairsShortcutBackInsert = '<leader>b'

" }}}
