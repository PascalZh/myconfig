" Outlooking
" rainbow parentheses {{{1
augroup RainbowParentheses_
  au!
  au BufEnter *.rkt,*.rktl,*.scm RainbowParenthesesToggleAll
augroup END

let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['brown',       'firebrick3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

            "\ ['gray',        'RoyalBlue3'],
            "\ ['black',       'SeaGreen3'],
            "\ ['darkmagenta', 'DarkOrchid3'],
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" }}}
" camspiers/lens.vim  & animate.vim {{{
let g:animate#distribute_space = 0
let g:animate#duration = 400.0
" available: ease_out_cubic ease_out_quad ease_linear
let g:animate#easing_func = 'animate#ease_out_quad'
let g:lens#disabled = 0
let g:lens#disabled_filetypes = ['nerdtree', 'fzf', 'qf']
let g:lens#width_resize_max = 100
let g:lens#width_resize_min = 3
" }}}
" Edit
" autopair {{{1
" works in the insert mode
au FileType racket let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = '<leader>n'
let g:AutoPairsShortcutBackInsert = '<leader>b'

" }}}
" gundo and backup{{{1
set backup
if finddir('.vim/undo', $HOME) == ''
  call mkdir($HOME . "/.vim/undo", "p")
endif
if finddir('.vim/backup', $HOME) == ''
  call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if has('persistent_undo')
	set undodir=~/.vim/undo
	set undofile
	set undolevels=1000
	set undoreload=10000
endif
let g:gundo_width=50
let g:gundo_prefer_python3=1
" }}}
" multiple-cursors{{{1
"let g:multi_cursor_insert_maps        = {'j':1, '<leader>':1}

let g:multi_cursor_normal_maps = {'@': 1, 'F': 1, 'T': 1, '[': 1, '\': 1, ']': 1, '!': 1, '"': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'm': 1, 'q': 1, 'r': 1, 't': 1, 'y': 1, 'z': 1, '<': 1, '=': 1, '>': 1, 'a': 1, 'i': 1}
" }}}
" yuttie/comfortable-motion.vim {{{
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>
" }}}
" Other
" NerdTree {{{1
" 最后一个窗口是nerdtree时关闭vim正常关闭
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

func! NERDTreeToggleAndMap_b_()
    NERDTreeToggle
    let str=expand('%')
    if matchstr(str,'NERD_tree_') != ''
        setlocal nocuc
        nnoremap <buffer> b gg3j
    endif
endfunc
let g:NERDTreeMapOpenSplit="s"
let g:NERDTreeMapPreviewSplit="gs"
let g:NERDTreeMapOpenVSplit="v"
let g:NERDTreeMapPreviewVSplit="gv"
"}}}
"  ack.vim {{{1
if LINUX()
  let g:ack_mappings = {
        \"t":"<C-W><CR><C-W>T" ,
        \"gt":"<C-W><CR><C-W>TgT<C-W>j" ,
        \"o":"<CR>" ,
        \"go":"<CR><C-W>j" ,
        \"s":"<C-W><CR><C-W>K" ,
        \"gs":"<C-W><CR><C-W>K<C-W>b" ,
        \"v":"<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t" ,
        \"gv":"<C-W><CR><C-W>H<C-W>b<C-W>J" }
  "    let g:ack_use_dispatch=1
endif
" }}}
" {{{ lervag/vimtex
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_compiler_progname='nvr'
au FileType tex command! LaTexPreviewMode execute "VimtexCompile" | !bspc config window_gap 0
" }}}
" Code
" ultisnips {{{1
"let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsUsePythonVersion=3

" you need manually copy snippets into ~/.vim/suba_snippets (subalashii)
let g:UltiSnipsSnippetsDir=$HOME . "/.vim/suba_snippets"
let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/suba_snippets"]

let g:UltiSnipsExpandTrigger='<C-Tab>'
let g:UltiSnipsJumpForwardTrigger='<C-Tab>'
let g:UltiSnipsJumpBackwardTrigger='<C-S-Tab>'
"let g:UltiSnipsRemoveSelectModeMappings = 0
" }}}
" neoclide/coc.nvim {{{
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> M :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
"nmap <silent> <TAB> <Plug>(coc-range-select)
"xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" }}}
" mhinz/vim-startify {{{1
let g:startify_fortune_use_unicode = 1
autocmd User Startified nmap <buffer> o <plug>(startify-open-buffers)
let g:startify_change_to_vcs_root = 1
let g:startify_enable_unsafe = 1
"autocmd User Startified highlight StartifyBracket ctermfg=240 |
      "\highlight StartifyFooter  ctermfg=242                  |
      "\highlight StartifyHeader  ctermfg=50                   |
      "\highlight StartifyNumber  ctermfg=215                  |
      "\highlight StartifyPath    ctermfg=160                  |
      "\highlight StartifySlash   ctermfg=215                  |
      "\highlight StartifySpecial ctermfg=240
" }}}
" airblade/vim-gitgutter {{{1
set updatetime=100
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
" }}}
" ncm2/ncm2(deleted) {{{1
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
"inoremap <c-c> <ESC>

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Use <TAB> to select the popup menu:
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" wrap existing omnifunc
" Note that omnifunc does not run in background and may probably block the
" editor. If you don't want to be blocked by omnifunc too often, you could
" add 180ms delay before the omni wrapper:
"  'on_complete': ['ncm2#on_complete#delay', 180,
"               \ 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
"au User Ncm2Plugin call ncm2#register_source({
      "\ 'name' : 'css',
      "\ 'priority': 9, 
      "\ 'subscope_enable': 1,
      "\ 'scope': ['css','scss'],
      "\ 'mark': 'css',
      "\ 'word_pattern': '[\w\-]+',
      "\ 'complete_pattern': ':\s*',
      "\ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
      "\ })
" }}}
" neomake/neomake(deleted) {{{1
"function! MyOnBattery()
  "return readfile('/sys/class/power_supply/AC/online') == ['0']
"endfunction

"if has('nvim')
  "if MyOnBattery()
    "call neomake#configure#automake('nrwi', 500)
  "else
    "call neomake#configure#automake('nrwi', 150)
  "endif
"endif
"let g:neomake_cpp_enabled_makers=['gcc']
"let g:neomake_cpp_gcc_args=['-fsyntax-only', '-Wall', '-Wextra', '-I./',
      "\'-std=c++1z',
      "\'-I/usr/include/python3.5m',
      "\'-lfmt']
      "\'-L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu', '-L/usr/lib', '-lpython3.5m', '-lpthread', '-ldl', '-lutil', '-lm', '-Xlinker', '-export-dynamic', '-Wl,-O1', '-Wl,-Bsymbolic-functions',
"let g:neomake_open_list = 2
" }}}
" ncm2/ncm2-ultisnips(deleted) {{{1
" }}}
" cpp-enhanced-hl(deleted){{{1
"if LINUX()
"let g:cpp_class_scope_highlight = 1
"let g:cpp_member_variable_highlight = 1
"let g:cpp_class_decl_highlight = 1
"let g:cpp_experimental_simple_template_highlight = 1
"endif
"}}}
" ycm (deleted) {{{1
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"let g:ycm_key_list_select_completion   = ['<Tab>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<S-Tab>', '<C-p>', '<Up>']
" }}}
" ale {{{1
let g:ale_fixers={
      \	'*':['remove_trailing_lines', 'trim_whitespace'],
      \ 'python':['autopep8', 'yapf'],
      \}
let g:ale_linters={
      \	'c++':['clang'],
      \	'c':['clang'],
      \ 'python':['flake8', 'pylint'],
      \}
let g:airline#extensions#ale#enabled=1
let g:ale_open_list=0
let g:ale_list_window_size=5
let g:ale_sign_column_always=1
let g:ale_set_highlights=0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'

"let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
" }}}
" vim-haskellConcealPlus{{{
let g:hscoptions='w'
" }}}
" haskell-vim{{{
let g:haskell_classic_highlighting=1
" }}}
" Game
" vim games {{{1
command! GameCodeBreak VimGameCodeBreak
command! GameNibble Nibble
command! GameFlappyVird FlappyVird
command! GameMario Mario
command! GamePuyo Puyo
" }}}
