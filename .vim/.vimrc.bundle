" Outlooking
" rainbow parentheses {{{1
let g:rbpt_colorpairs = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['brown',       'firebrick3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]

      "\ ['gray',        'RoyalBlue3'],
      "\ ['black',       'SeaGreen3'],
      "\ ['darkmagenta', 'DarkOrchid3'],
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" }}}
" mhinz/vim-startify {{{1
let g:startify_fortune_use_unicode = 1
let g:startify_files_number = 7
let g:startify_change_to_vcs_root = 0
"let g:startify_enable_unsafe = 1
let g:startify_lists = [
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]
      "\ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
let g:startify_bookmarks = [ '~/.vim/bundle/omniwindow.nvim/lua/omniwindowlib/ui.lua' ]
let g:startify_commands = [
      \ ':help startify',
      \ ]
      "\ ['Vim Reference', 'h ref'],
      "\ {'h': 'h ref'},
      "\ {'m': ['My magical function', 'call Magic()']},
" }}}
" Edit
" preservim/nerdcommenter {{{
let g:NERDDefaultAlign = 'left'
" }}}
" tmsvg/pear-tree {{{
" Default rules for matching:
let g:pear_tree_pairs = {
      \ '(': {'closer': ')'},
      \ '[': {'closer': ']'},
      \ '{': {'closer': '}'},
      \ "'": {'closer': "'"},
      \ '"': {'closer': '"'}
      \ }
au FileType markdown let b:pear_tree_pairs = {
      \ '(': {'closer': ')', 'not_at': ['lr']},
      \ '[': {'closer': ']', 'not_at': ['lr']},
      \ '{': {'closer': '}', 'not_at': ['lr']},
      \ "'": {'closer': "'"},
      \ '"': {'closer': '"'},
      \ }
      "\ '$': {'closer': '$'}

" Pear Tree is enabled for all filetypes by default:
let g:pear_tree_ft_disabled = []

" Pair expansion is dot-repeatable by default:
let g:pear_tree_repeatable_expand = 1

" Smart pairs are disabled by default:
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

" If enabled, smart pair functions timeout after 60ms:
let g:pear_tree_timeout = 60

" Automatically map <BS>, <CR>, and <Esc>
let g:pear_tree_map_special_keys = 0
imap <BS> <Plug>(PearTreeBackspace)
imap <CR> <Plug>(PearTreeExpand)
imap <Space> <Plug>(PearTreeSpace)
imap <C-j> <Plug>(PearTreeJump)
" remap of <ESC> will cause some conflicts with other plugins, so it will be
" integrated in my `easy_jk` plugin.

" Default mappings:
"imap <BS> <Plug>(PearTreeBackspace)
"imap <CR> <Plug>(PearTreeExpand)
"imap <Esc> <Plug>(PearTreeFinishExpansion)
" Pear Tree also makes <Plug> mappings for each opening and closing string.
"     :help <Plug>(PearTreeOpener)
"     :help <Plug>(PearTreeCloser)

" Not mapped by default:
" <Plug>(PearTreeSpace)
" <Plug>(PearTreeJump)
" <Plug>(PearTreeExpandOne)
" <Plug>(PearTreeJNR)
" }}}
" gundo and backup{{{1
" TODO figure out backup and undo, find potential bugs with treesitter
" switch this plugin to mundo or others
set backup
if finddir('.vim/undo', $HOME) == ''
  call mkdir($HOME . "/.vim/undo", "p")
endif
if finddir('.vim/backup', $HOME) == ''
  call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif
let g:gundo_width=50
let g:gundo_prefer_python3=1
" }}}
" Plug 'junegunn/vim-peekaboo' {{{
let g:peekaboo_window = 'vert bo 40new'
" }}}
" Plug 'mhinz/vim-grepper' {{{
let g:grepper = {}
let g:grepper.tools = ['git', 'ack']
let g:grepper.prompt_text = '$c=> '
let g:grepper.jump = 0
" }}}
" Code
" ultisnips {{{1
"let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsUsePythonVersion=3

" you need manually copy snippets into ~/.vim/suba_snippets (subalashii)
let g:UltiSnipsSnippetsDir=$HOME . "/.vim/suba_snippets"
let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/suba_snippets"]

let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
"let g:UltiSnipsRemoveSelectModeMappings = 0
" }}}
" neoclide/coc.nvim {{{
" Use <c-space> to trigger completion.
call coc#add_extension('coc-python', 'coc-ultisnips', 'coc-marketplace')

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <c-n>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <c-p> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" }}}
" airblade/vim-gitgutter {{{1
set updatetime=100
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=auto
else
  let g:gitgutter_sign_column_always = 1
endif
" }}}
" vim-haskellConcealPlus{{{
let g:hscoptions='wErlâ†±'
" }}}
" haskell-vim{{{
let g:haskell_classic_highlighting=1
" }}}
" Other
" kyazdani42/nvim-tree.lua {{{
let g:lua_tree_bindings = {
    \ 'edit':            ['<CR>', 'o'],
    \ 'edit_vsplit':     'v',
    \ 'edit_split':      's',
    \ 'edit_tab':        't',
    \ 'toggle_ignored':  'I',
    \ 'toggle_dotfiles': 'H',
    \ 'refresh':         'R',
    \ 'preview':         '<Tab>',
    \ 'cd':              '<C-]>',
    \ 'create':          'a',
    \ 'remove':          'd',
    \ 'rename':          'r',
    \ 'cut':             'x',
    \ 'copy':            'c',
    \ 'paste':           'p',
    \ 'prev_git_item':   '[c',
    \ 'next_git_item':   ']c',
    \ }
let g:lua_tree_indent_markers = 1
func! LuaTreeToggleAndSetOptions()
  LuaTreeToggle
  if expand('%') == 'LuaTree'
    setlocal nocursorcolumn
    setlocal nowrap
    map <buffer> q <C-w>q
  endif
endfunc
" }}}
" Plug 'nvim-treesitter/nvim-treesitter' {{{
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  highlight = {
    enable = true,  -- false will disable the whole extension
  },
  indent = {
    enable = true,
  },
}
EOF
" }}}
" lervag/vimtex {{{
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:tex_flavor = 'latex'
"let g:tex_conceal='abdmg'
" }}}
let g:startuptime_self = 1
let g:vim_markdown_math = 1
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_new_list_item_indent = 2
