" Outlooking
" rainbow parentheses {{{1
"augroup RainbowAugroup
    "au!
    "au FileType lisp,scheme RainbowParenthesesToggle
    "au FileType lisp,scheme RainbowParenthesesLoadRound
    "au FileType lisp,scheme RainbowParenthesesLoadSquare
    "au FileType lisp,scheme RainbowParenthesesLoadBraces
    "au FileType lisp,scheme RainbowParenthesesLoadChevrons
"augroup END
augroup RainbowParentheses_
  au!
  au BufEnter *.rkt,*.rktl,*.scm RainbowParenthesesToggleAll
augroup END

let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['brown',       'firebrick3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

            "\ ['gray',        'RoyalBlue3'],
            "\ ['black',       'SeaGreen3'],
            "\ ['darkmagenta', 'DarkOrchid3'],
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" }}}
"indent-guides(deleted){{{1
"let g:indent_guides_guide_size=1
"let g:indent_guides_space_guides=1
"let g:indent_guides_exclude_filetypes=['help', 'nerdtree',
"'undo','ColorExplorer']
"let g:indent_guides_start_level=2
"augroup indent_guides_my_group
"au!
"au FileType vimscript,c,cpp IndentGuidesEnable
"augroup END
"}}}
" Edit
" autopair {{{1
" works in the insert mode
"let g:AutoPairsShortcutJump='<leader>j'
"let g:AutoPairsShortcutBackInsert='<leader>b'
au FileType racket let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = '<leader>n'
let g:AutoPairsShortcutBackInsert = '<leader>b'

" }}}
" gundo and backup{{{1
set backup
if finddir('.vim/undo', $HOME) == ''
  call mkdir($HOME . "/.vim/undo", "p")
endif
if finddir('.vim/backup', $HOME) == ''
  call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if has('persistent_undo')
	set undodir=~/.vim/undo
	set undofile
	set undolevels=1000
	set undoreload=10000
endif
let g:gundo_width=50
let g:gundo_prefer_python3=1
" }}}
" multiple-cursors{{{1
"let g:multi_cursor_insert_maps        = {'j':1, '<leader>':1}

let g:multi_cursor_normal_maps = {'@': 1, 'F': 1, 'T': 1, '[': 1, '\': 1, ']': 1, '!': 1, '"': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'm': 1, 'q': 1, 'r': 1, 't': 1, 'y': 1, 'z': 1, '<': 1, '=': 1, '>': 1, 'a': 1, 'i': 1}
" }}}
" goyo {{{1
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
" }}}
" terryma/vim-smooth-scroll {{{1
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
"noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
"noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" }}}
" haya14busa/vim-edgemotion {{{1
"nnoremap <M-j> <Plug>(edgemotion-j)
"nnoremap <M-k> <Plug>(edgemotion-k)
" }}}
" zhou13/vim-easyescape {{{
let g:easyescape_chars = { "j": 1, "k": 1 }
let g:easyescape_timeout = 100
inoremap jk <ESC>
inoremap kj <ESC>
" }}}
" Other
" NerdTree {{{1
" 最后一个窗口是nerdtree时关闭vim正常关闭
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

"nnoremap <leader>e :call Map_b_ToMoveToBookmarks()<cr>

"func! Map_b_ToMoveToBookmarks()
"    NERDTreeFind
"    nmap <buffer> b gg:setlocal nohls<cr>/-Bookmarks-<cr>:normal! zu<cr>
"endfunc

func! NERDTreeToggleAndMap_b_()
    NERDTreeToggle
    let str=expand('%')
    if matchstr(str,'NERD_tree_') != ''
        setlocal nocuc
        nmap <buffer> b gg:setlocal nohls<cr>/-Bookmarks-<cr>:normal! ztj<cr>
    endif
endfunc
let g:NERDTreeMapOpenSplit="s"
let g:NERDTreeMapPreviewSplit="gs"
let g:NERDTreeMapOpenVSplit="v"
let g:NERDTreeMapPreviewVSplit="gv"
"}}}
"  ack.vim {{{1
if LINUX()
  let g:ack_mappings = {
        \"t":"<C-W><CR><C-W>T" ,
        \"gt":"<C-W><CR><C-W>TgT<C-W>j" ,
        \"o":"<CR>" ,
        \"go":"<CR><C-W>j" ,
        \"s":"<C-W><CR><C-W>K" ,
        \"gs":"<C-W><CR><C-W>K<C-W>b" ,
        \"v":"<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t" ,
        \"gv":"<C-W><CR><C-W>H<C-W>b<C-W>J" }
  "    let g:ack_use_dispatch=1
endif
" }}}
" {{{ lervag/vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_compiler_progname='nvr'
" }}}
" Code
" ultisnips {{{1
"let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsUsePythonVersion=3

" you need manually copy snippets into ~/.vim/suba_snippets (subalashii)
let g:UltiSnipsSnippetsDir=$HOME . "/.vim/suba_snippets"
let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/suba_snippets"]

let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
"let g:UltiSnipsRemoveSelectModeMappings = 0
" }}}
" mhinz/vim-startify {{{1
let g:startify_fortune_use_unicode = 1
autocmd User Startified nmap <buffer> o <plug>(startify-open-buffers)
let g:startify_change_to_vcs_root = 1
let g:startify_enable_unsafe = 1
"autocmd User Startified highlight StartifyBracket ctermfg=240 |
      "\highlight StartifyFooter  ctermfg=242                  |
      "\highlight StartifyHeader  ctermfg=50                   |
      "\highlight StartifyNumber  ctermfg=215                  |
      "\highlight StartifyPath    ctermfg=160                  |
      "\highlight StartifySlash   ctermfg=215                  |
      "\highlight StartifySpecial ctermfg=240
" }}}
" ncm2/ncm2 {{{1
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
"inoremap <c-c> <ESC>

" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Use <TAB> to select the popup menu:
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" wrap existing omnifunc
" Note that omnifunc does not run in background and may probably block the
" editor. If you don't want to be blocked by omnifunc too often, you could
" add 180ms delay before the omni wrapper:
"  'on_complete': ['ncm2#on_complete#delay', 180,
"               \ 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
"au User Ncm2Plugin call ncm2#register_source({
      "\ 'name' : 'css',
      "\ 'priority': 9, 
      "\ 'subscope_enable': 1,
      "\ 'scope': ['css','scss'],
      "\ 'mark': 'css',
      "\ 'word_pattern': '[\w\-]+',
      "\ 'complete_pattern': ':\s*',
      "\ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
      "\ })
" }}}
" neomake/neomake {{{1
"function! MyOnBattery()
  "return readfile('/sys/class/power_supply/AC/online') == ['0']
"endfunction

"if has('nvim')
  "if MyOnBattery()
    "call neomake#configure#automake('nrwi', 500)
  "else
    "call neomake#configure#automake('nrwi', 150)
  "endif
"endif
"let g:neomake_cpp_enabled_makers=['gcc']
"let g:neomake_cpp_gcc_args=['-fsyntax-only', '-Wall', '-Wextra', '-I./',
      "\'-std=c++1z',
      "\'-I/usr/include/python3.5m',
      "\'-lfmt']
      "\'-L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu', '-L/usr/lib', '-lpython3.5m', '-lpthread', '-ldl', '-lutil', '-lm', '-Xlinker', '-export-dynamic', '-Wl,-O1', '-Wl,-Bsymbolic-functions',
"let g:neomake_open_list = 2
" }}}
" ncm2/ncm2-ultisnips {{{1
" }}}
" airblade/vim-gitgutter {{{1
set updatetime=100
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
" }}}
" cpp-enhanced-hl(deleted){{{1
"if LINUX()
"let g:cpp_class_scope_highlight = 1
"let g:cpp_member_variable_highlight = 1
"let g:cpp_class_decl_highlight = 1
"let g:cpp_experimental_simple_template_highlight = 1
"endif
"}}}
" ycm (deleted) {{{1
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"let g:ycm_key_list_select_completion   = ['<Tab>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<S-Tab>', '<C-p>', '<Up>']
" }}}
" ale {{{1
let g:ale_fixers={
      \	'*':['remove_trailing_lines', 'trim_whitespace'],
      \ 'python':['autopep8', 'yapf'],
      \}
let g:ale_linters={
      \	'c++':['clang'],
      \	'c':['clang'],
      \ 'python':['flake8', 'pylint'],
      \}
let g:airline#extensions#ale#enabled=1
let g:ale_open_list=1
let g:ale_list_window_size=5
let g:ale_sign_column_always=1
let g:ale_set_highlights=0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
" }}}
" Game
" vim games {{{1
command! GameCodeBreak VimGameCodeBreak
command! GameNibble Nibble
command! GameFlappyVird FlappyVird
command! GameMario Mario
command! GamePuyo Puyo
" }}}
