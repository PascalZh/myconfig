priority -50

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

##############
# MATH STUFF #
##############

snippet eq "Equation" b
\begin{equation}
	$0
\end{equation}
endsnippet

snippet eqnn "Equation without number" b
\begin{equation*}
	$0
\end{equation*}
endsnippet

snippet al "Align" b
\begin{align}
	$0
\end{align}
endsnippet

snippet alnn "Align without numbers" b
\begin{align*}
	$0
\end{align*}
endsnippet

snippet eqa "Equation array" b
\begin{eqnarray}
	$1 & $2 & $0
\end{eqnarray}
endsnippet

snippet eqann "Equation array without numbers" b
\begin{eqnarray*}
	$1 & $2 & $0
\end{eqnarray*}
endsnippet

snippet frac "Fraction" w
\frac{${1:${VISUAL}}}{${2}}
endsnippet

snippet mat "Smart Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	$0
\end{$1matrix}
endsnippet

snippet lr( "left( right)" w
\left( ${1:${VISUAL}} \right)
endsnippet

snippet lr| "left| right|" w
\left| ${1:${VISUAL}} \right|
endsnippet

snippet lr{ "left\{ right\}" w
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

snippet lr[ "left[ right]" w
\left[ ${1:${VISUAL}} \right]
endsnippet

#################
# PHYSICS STUFF #
#################

snippet dv "Derivative" w
\dv[${1:${VISUAL}}]{${2}}{${3}}
endsnippet

snippet pdv "Partial Derivative" w
\pdv[${1:${VISUAL}}]{${2}}{${3}}
endsnippet

snippet SI "SI-Unit" w
\SI{${1:${VISUAL}}}{${2}}
endsnippet

snippet mk "Math: inline mode" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math: display mode" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\}/' "{} Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == '{': depth -= 1
	if stripped[i] == '}': depth += 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
priority -50

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

# vim:ft=snippets:
