"
"
" NerdTree {{{1
" 最后一个窗口是nerdtree时关闭vim正常关闭
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1

"nnoremap <leader>e :call Map_b_ToMoveToBookmarks()<cr>

"func! Map_b_ToMoveToBookmarks()
"    NERDTreeFind
"    nmap <buffer> b gg:setlocal nohls<cr>/-Bookmarks-<cr>:normal! zu<cr>
"endfunc

func! NERDTreeToggleAndMap_b_()
    NERDTreeToggle
    let str=expand('%')
    if matchstr(str,'NERD_tree_') != ''
        setlocal nocuc
        nmap <buffer> b gg:setlocal nohls<cr>/-Bookmarks-<cr>:normal! ztj<cr>
    endif
endfunc
let g:NERDTreeMapOpenSplit="s"
let g:NERDTreeMapPreviewSplit="gs"
let g:NERDTreeMapOpenVSplit="v"
let g:NERDTreeMapPreviewVSplit="gv"
"}}}
" rainbow parentheses {{{1
"augroup RainbowAugroup
    "au!
    "au FileType lisp,scheme RainbowParenthesesToggle
    "au FileType lisp,scheme RainbowParenthesesLoadRound
    "au FileType lisp,scheme RainbowParenthesesLoadSquare
    "au FileType lisp,scheme RainbowParenthesesLoadBraces
    "au FileType lisp,scheme RainbowParenthesesLoadChevrons
"augroup END
augroup RainbowParentheses_
  au!
  au BufEnter * RainbowParenthesesToggleAll
augroup END

let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" }}}
" cpp-enhanced-hl(deleted){{{1
"if LINUX()
    "let g:cpp_class_scope_highlight = 1
    "let g:cpp_member_variable_highlight = 1
    "let g:cpp_class_decl_highlight = 1
    "let g:cpp_experimental_simple_template_highlight = 1
"endif
"}}}
" autopair {{{1
" works in the insert mode
let g:AutoPairsShortcutJump='<leader>j'
let g:AutoPairsShortcutBackInsert='<leader>b'
au FileType racket let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}

" }}}
" gundo and backup{{{1
set backup
if finddir('.vim/undo', $HOME) == ''
  call mkdir($HOME . "/.vim/undo", "p")
endif
if finddir('.vim/backup', $HOME) == ''
  call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if has('persistent_undo')
	set undodir=~/.vim/undo
	set undofile
	set undolevels=1000
	set undoreload=10000
endif
let g:gundo_width=50
let g:gundo_prefer_python3=1
" }}}
"indent-guides(deleted){{{1
"let g:indent_guides_guide_size=1
"let g:indent_guides_space_guides=1
"let g:indent_guides_exclude_filetypes=['help', 'nerdtree', 'undo','ColorExplorer']
"let g:indent_guides_start_level=2
"augroup indent_guides_my_group
"au!
"au FileType vimscript,c,cpp IndentGuidesEnable
"augroup END
"}}}
" multiple-cursors{{{1
let g:multi_cursor_insert_maps={'j':1, ';':1}
" }}}
"  ack.vim {{{1
if LINUX()
    let g:ack_mappings = {
                \"t":"<C-W><CR><C-W>T" ,
                \"gt":"<C-W><CR><C-W>TgT<C-W>j" ,
                \"o":"<CR>" ,
                \"go":"<CR><C-W>j" ,
                \"s":"<C-W><CR><C-W>K" ,
                \"gs":"<C-W><CR><C-W>K<C-W>b" ,
                \"v":"<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t" ,
                \"gv":"<C-W><CR><C-W>H<C-W>b<C-W>J" }
"    let g:ack_use_dispatch=1
endif
" ycm {{{1
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion   = ['<Tab>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-Tab>', '<C-p>', '<Up>']

" ale {{{1
let g:ale_fixers={
			\	'*':['remove_trailing_lines', 'trim_whitespace'],
      \ 'python':['autopep8', 'yapf'],
			\}
let g:ale_linters={
			\	'c++':['clang'],
			\	'c':['clang'],
      \ 'python':['flake8', 'pylint'],
			\}
"let g:ale_completion_enabled=1
let g:airline#extensions#ale#enabled=1
let g:ale_open_list=1
let g:ale_list_window_size=5
let g:ale_sign_column_always=1
let g:ale_set_highlights=0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

"augroup ALE_MY_GROUP
	"au!
	"au FileType python let b:ale_linters=['flake8', 'pylint']
	"au FileType python let b:ale_fixers=['autopep3', 'yapf']
	"au FileType python let b:ale_warn_about_trailing_whitespace=0
"augroup END

" ultisnips {{{1
"let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsEditSplit='vertical'

" you need manually copy snippets into ~/.vim/suba_snippets (subalashii)
let g:UltiSnipsSnippetsDir=$HOME . "/.vim/suba_snippets"
let g:UltiSnipsSnippetDirectories=[$HOME . "/.vim/suba_snippets"]

let g:UltiSnipsExpandTrigger           = '<c-j>'
let g:UltiSnipsJumpForwardTrigger      = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger     = '<c-b>'
" goyo {{{1
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
" terryma/vim-smooth-scroll {{{1
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" haya14busa/vim-edgemotion {{{1
nnoremap <M-j> <Plug>(edgemotion-j)
nnoremap <M-k> <Plug>(edgemotion-k)
" vim games {{{1
command! GameCodeBreak VimGameCodeBreak
command! GameNibble Nibble
command! GameFlappyVird FlappyVird

" mhinz/vim-startify {{{1
let g:startify_fortune_use_unicode = 1
autocmd User Startified nmap <buffer> o <plug>(startify-open-buffers)
let g:startify_change_to_vcs_root = 1
let g:startify_enable_unsafe = 1
let g:startify_custom_indices = ['F', 'f', 'G', 'H', 'W', 'R', 'g', 'h', 'w', 'r', 'p', 'l', 'm']
autocmd User Startified highlight StartifyBracket ctermfg=240 |
      \highlight StartifyFooter  ctermfg=242                  |
      \highlight StartifyHeader  ctermfg=50                   |
      \highlight StartifyNumber  ctermfg=215                  |
      \highlight StartifyPath    ctermfg=160                  |
      \highlight StartifySlash   ctermfg=215                  |
      \highlight StartifySpecial ctermfg=240
